##
# nginx app specific configuration
#
# c6
##

        client_max_body_size 50M;


        index index.html index.htm;

        # proxy set up
        # set reasonable proxy memory limits
        proxy_max_temp_file_size 64M;
        proxy_buffering on;
        proxy_buffer_size 8k;
        proxy_buffers 32 8k;
        # Note: in some version 7.xx of nginx they do not pass Set-Cookie unless explicitly told to do so
        proxy_pass_header       Set-Cookie;


        # if blocked_ip is set by geo at http level, reject here
        if ($blocked_ip = 1) {
            return 403;
        }

#####
        # maintenance page support
        # This allows people to use images and css in their maintenance.html file
        if ($request_filename ~* \.(css|jpg|gif|png)$) {
            break;
        }

        # Rewrite all the requests to the maintenance.html page if it exists.
        # To satisfy the Amazon load balancer we don't want to return
        # 503 errors when we are in maint mode, otherwise it will
        # take the machine out of the pool and we will lose our
        # custom maint mode page. So, we have to jump through
        # some hoops to make a multiple condition compare work
        # with nginx since it only allows a single condition in an
        # if statement.  We can however prep the state up front
        # by appending state to a variable that represents both
        # maint mode on and if they are requesting the health
        # check page...
        #
        # We use a single variable called maint_state.  If maint mode
        # is on we set it to M, if we also discover that we are
        # being asked for the health_check page we append a C.
        # So, if we are in the special mode of returning no error
        # we check that the maint_state = MC.  If it just equals M we do
        # the normal 503 maint page.
        #
        set $maint_state "";
        if (-f $document_root/system/maintenance.html) {
            set $maint_state M;
        }
        if ($request_uri ~* ^/service/health_check\?amazon=true$) {
            set $maint_state "${maint_state}C";
        }

        # now see if maint mode only, no healthcheck
        if ($maint_state = M) {
            return 503;
        }
        # finally see if we are in maint mode and health_check
        if ($maint_state = MC) {
            # return the maint page but with 200 instead of the 503 code
            # this will be interpreted by ELB as healthy
            # so we don't lose our maint page by ELB thinking we
            # are down
            rewrite  ^(.*)$  /elb_maint.html break;
        }

        error_page 401 /401.html;
        error_page 403 /403.html;
        error_page 404 /404.html;
        error_page 500 502 504 /500.html;

        error_page 503 @503;

        location @503 {
            rewrite  ^(.*)$  /maintenance.html break;
        }

        location = /elb_maint.html{
            internal;
            break;
        }
#####

#####
        # redirects to fix bad links into us found in google search

        location ~* ^/forums($|/.*?$) {
            rewrite (.*) http://help.zangzing.com/forums permanent;
        }
        location ~* ^/blog/latest-photo-sharing-news/www.facebook.com/zangzing($|/.*?$) {
            rewrite (.*) http://localhost/blog/latest-photo-sharing-news permanent;
        }
        location ~* ^/blog/latest-photo-sharing-news/www.twitter.com/zangzing($|/.*?$) {
            rewrite (.*) http://localhost/blog/latest-photo-sharing-news permanent;
        }
        location ~* ^/about/privacy($|/.*?$) {
            rewrite (.*) http://localhost/privacy permanent;
        }
        location ~* ^/team($|/.*?$) {
            rewrite (.*) http://localhost/about/team permanent;
        }
        location ~* ^/blog/few-photo-sharing-updates/www.zangzing.com/join($|/.*?$) {
            rewrite (.*) http://localhost/blog/few-photo-sharing-updates permanent;
        }
        location ~* ^/blog/few-photo-sharing-updates/www.zangzing.com($|/.*?$) {
            rewrite (.*) http://localhost/blog/few-photo-sharing-updates permanent;
        }
        location ~* ^/about/share-photo-of-the-day($|/.*?$) {
            rewrite (.*) http://localhost/about/photo-of-the-day permanent;
        }
#####

#####
        # remap the location for staging.site.zangzing.com - i.e. the wordpress site
        # wordpress doesn't like it if you give urls without a trailing /
        # and ends up issuing redirects so we need to make sure we
        # deal with that here.  As an alternate to avoid the redirects
        # see the commented out rules below
        #
        location ~* "^/(sitemap\.xml|blog|xmlrpc\.php|about|privacy|terms|jobs|contact|team|site|
                |how-to-comment-on-photos|photos-to-facebook|upload-photos|wp-.*?)($|/.*?$)"{
            # uncomment following if you want to allow caching
            #proxy_cache zz_cache;
            #proxy_cache_valid  200 302  10m;

            proxy_intercept_errors off;
            proxy_set_header    Host                            staging.site.zangzing.com;
            proxy_pass          http://staging.site.zangzing.com;
            proxy_redirect      http://staging.site.zangzing.com/    http://localhost/;
        }

        # handle the rewrite done to detect /?s=, /?p=, etc
        # this is done so we have something to trigger off of and get this proxied
        # over to staging.site.zangzing.com (wordpress) - we can't proxy from within an if
        # so we rewrite with /siteremap/ as the address which tells us to proxy
        # NOTE: although this looks similar to the above location there is a subtle
        # difference as we call the root level proxy / and don't pass any other path
        # elements.  The args are passed automagically by nginx
        location = /siteremap/{
            internal;
            proxy_intercept_errors off;
            proxy_set_header    Host                            staging.site.zangzing.com;
            proxy_pass          http://staging.site.zangzing.com/;
            proxy_redirect      http://staging.site.zangzing.com/    http://localhost/;
        }
#####

#####
        # v3homepage served directly
        location ~* "^/(v3index.html|index.html)($|/.*?$)"{
            root /data/v3homepage;
            expires -1y;
        }

        # v3homepage assets served directly
        location ~* "^/v3assets.*?($|/.*?$)"{
            root /data/v3homepage;
            expires 1y;
        }

        # and proxy if the root
        location = / {

            # this is used to deal with /?s= and /?p= from the wordpress site
            # at the root level so it needs to go here
            if ($args ~ ^(s|p|page_id|preview)=){
                rewrite ^/$ /siteremap/ last;
            }

            # if they are logged in (or appear to be) take them back to the service
            # when they visit the root page
            if ($http_cookie ~ "user_credentials=.*?($|;)"){
              rewrite ^(.*)$ http://localhost/service redirect;
            }

            rewrite (.*) /index.html last;
        }
#####


#####
        # set Expire header on assets: see http://developer.yahoo.com/performance/rules.html#expires
        location ~ ^/(images|javascripts|stylesheets|assets|system)/ {
            expires 1y;
        }



        # needed to forward user's IP address to rails
        proxy_set_header  X-Real-IP         $remote_addr;
        proxy_set_header  Host              $http_host;
        # only add real ip onto forwarded for if not on Amazon because in
        # that case we use the real_ip module to determine the real ip
        proxy_set_header  X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header  X-Forwarded-Proto $scheme;
        proxy_redirect off;


        #
        #====================================== X-Accel-Redirect Proxy ====================================
        #
        # This proxy serves files through the X-Accel-Redirect header. You must include the host and path
        # of the file you want served in the header.  In the current configuration, the user  hits
        # www.zangzing.com/proxy?url=<SITE> the call is sent to rails which decides if the user is allowed
        # to use the proxy and if so returns the call with the X-Accel-Redirect header. Under this architecture
        # rails is only used for authentication and authorization but the heavy lifting of file proxying is
        # done by nginx
        #
        location ~* ^/nginx_redirect/(.*?)/(.*) {

            internal;                   # Only allow internal requests to use the proxy
            resolver 208.67.222.222;       # GWS - using public OpenDNS dns server
            resolver_timeout 10s;          # how long we are willing to wait for name to be resolved
            set $download_uri $2;       # Extract download host and uri from the request
            set $download_host $1;
            set $download_url http://$download_host/$download_uri;  # Compose download url

            proxy_set_header Host $download_host;  # Set download request headers

            # GWS Amazon doesn't like us passing our auth through to them since this came from our clients
            # i.e. it's our basic auth not amazons and the files are public currently.  Same thing goes
            # for cookies.
            #
            # The following removes the header to make Amazon happy:
            proxy_set_header Authorization "";
            # don't pass cookies meant for zangzing
            proxy_set_header Cookie "";

            proxy_pass $download_url;  # Download the file and send it to client
        }

        #
        # ==================================== Photo uploads with upload_module ===========================
        #
        # Using upload_module, for info: http://www.grid.net.ru/nginx/upload.en.html
        # For help with paperclip: http://matthewhutchinson.net/2010/1/6/nginx-upload-module-with-paperclip-on-rails
        #
        # accepts photo uploads from agent and sendgrid
        #
        location ~* ^/service/albums/(.+)/upload$|^/service/photos/(.+)/upload$|^/service/sendgrid/import$ {
            # Once upload is received, send request to this location (see below)
            upload_pass @upload_location;

            upload_max_file_size  40M;

            # Store files to this directory
            # The directory is hashed, subdirectories 0 1 2 3 4 5 6 7 8 9 must exist
            # make sure to create //data/tmp/nginx/fast_uploads/0 /data/tmp/nginx/fast_uploads/1 etc.
            upload_store /data/tmp/nginx/fast_uploads 1;

            # set permissions on the uploaded files
            upload_store_access user:rw group:rw all:r;

            # Add new arguments to request body
            # this adds the original-filename, content-type, and the path+filename of the new tmp file
            upload_set_form_field fast_local_image[][original_name] "$upload_file_name";
            upload_set_form_field fast_local_image[][content_type] "$upload_content_type";
            upload_set_form_field fast_local_image[][filepath] "$upload_tmp_path";
            upload_set_form_field fast_upload_secret "this-is-a-key-from-nginx";
            upload_set_form_field _method "put";

            # Allow all the arguments  to go through
			upload_pass_form_field "^.*$";

            # Delete the new tmp file if the request fails upstream with any of this return values
            upload_cleanup 400 404 499 500-505;
        }

        location @upload_location {
            #Add a rewrite here if you want the fast_upload request to post somewhere else
            rewrite (.*) $1_fast;
            proxy_pass http://zangzing_upstream;
        }


        # bypass cache for resque so we need an explicit
        # entry since our default is to allow caching of rails
        # responses that don't keep it from happening with
        # cache-control headers
        #
        location /service/admin/resque {
            proxy_pass http://zangzing_upstream;
        }

        # redirect to zendesk page
        location ~* "^/(help)($|/.*?$)"{
            rewrite (.*) http://help.zangzing.com permanent;
        }
#####


#####
        # pass it on to rails
        location / {
            # Everything proxied in this location is subject to caching
            # so if you have any custom proxy handlers that shouldn't
            # be cached define them outside this location
            proxy_cache_valid  200 302  60m;
            proxy_cache zz_cache;


            # serve any existing file
            if (-f $request_filename) {
                break;
            }

            # serve any standard Rails page cache file with .html extension
            if (-f $request_filename.html) {
                rewrite (.*) $1.html break;
            }


            # auth is disabled for this server
            # auth_basic            "Restricted";
            # auth_basic_user_file  /etc/nginx/servers/zangzing.users;

            # nothing else served the file so on to the rails app
            if (!-f $request_filename) {
                proxy_pass http://zangzing_upstream;
                break;
            }
        }
#####

