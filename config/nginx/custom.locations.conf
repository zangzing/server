# DO NOT MODIFY THIS FILE!
# This file was installed by the nginx recipe located in git@github.com:zangzing/ey-cloud-recipes.git
# you can make your changes there and then upload and re-apply the recipe

#
#================================================== S3 Proxy =====================================
#
# This is Experimental
# Requests like this: /static/eco/bDY-Vm2Xur36WtjjIpbgF5_medium.jpeg
# Are responded by requests to http://eco.dev.zangzing.s3.amazonaws.com/images/bDY-Vm2Xur36WtjjIpbgF5/medium/bDY-Vm2Xur36WtjjIpbgF5.jpeg

location ~* "^\/static\/(alpha|bravo|charlie|delta|eco|foxtrot)\/(.{22})_(.*)\.(.{3,4})$"{
 resolver 172.16.0.23;
 #internal;
 proxy_max_temp_file_size 0;
 set $xauth $upstream_http_x_auth;
 set $date $upstream_http_date;
 proxy_set_header Authorization $xauth;
 proxy_set_header Date $date;
 proxy_pass http://$1.dev.zangzing.s3.amazonaws.com/images/$2/$3/$2.$4;
}

#
#========================================== Generic Proxy =========================================== 
#
# This location is commented out because we do not want to provide free proxy to the outside world
#
#location ~* ^\/aws_s3\/(.*) {
#location = /proxy {
#  resolver 172.16.0.23;
#
  # Location-specific logging
#  access_log /var/log/nginx/proxy.access.log main;
#  error_log /var/log/nginx/proxy.error.log warn;
#   
#  proxy_max_temp_file_size 0;
#  set $xauth $upstream_http_x_auth;
#  set $date $upstream_http_date;
#  proxy_set_header Authorization $xauth;
#  proxy_set_header Date $date;
#  proxy_pass http://$arg_url;
#}


#
#====================================== X-Accel-Redirect Proxy ====================================
#
# This proxy serves files through the X-Accel-Redirect header. You must include the host and path 
# of the file you want served in the header.  In the current configuration, the user  hits 
# www.zangzing.com/proxy?url=<SITE> the call is sent to rails which decides if the user is allowed 
# to use the proxy and if so returns the call with the X-Accel-Redirect header. Under this architecture
# rails is only used for authentication and authorization but the heavy lifting of file proxying is
# done by nginx
#
location ~* ^\/nginx_redirect\/(.*?)/(.*) {
 
  internal;                   # Only allow internal requests to use the proxy
  resolver 172.16.0.23;       # Used to resolve DNS for the proxy
  access_log /var/log/nginx/internal_redirect.access.log main; #log for security audig
  error_log /var/log/nginx/internal_redirect.error.log warn;   #log for errors 
  set $download_uri $2;       # Extract download host and uri from the request
  set $download_host $1;
  set $download_url http://$download_host/$download_uri;  # Compose download url
  proxy_set_header Host $download_host;  # Set download request headers
  proxy_max_temp_file_size 0;# Do not touch local disks when proxying content to clients
  proxy_pass $download_url;  # Download the file and send it to client
}

#
# ==================================== Photo uploads with upload_module ===========================
#
# Using upload_module, for info: http://www.grid.net.ru/nginx/upload.en.html
# For help with paperclip: http://matthewhutchinson.net/2010/1/6/nginx-upload-module-with-paperclip-on-rails
#
location ~* ^\/photos\/(.+)\/upload$ {
  # Once upload is received, send request to this location (see below)
  upload_pass @upload_location;

  # Store files to this directory
  # The directory is hashed, subdirectories 0 1 2 3 4 5 6 7 8 9 must exist    
  # make sure to create /tmp/fast_uploads/0 /tmp/fast_uploads/1 etc.
  upload_store /tmp/fast_uploads 1;

  # set permissions on the uploaded files
  upload_store_access user:rw group:rw all:r;

  # Add new arguments to request body
  # this adds the original-filename, content-type, and the path+filename of the new tmp file 
  upload_set_form_field photo[fast_local_image][original_name] "$upload_file_name";
  upload_set_form_field photo[fast_local_image][content_type] "$upload_content_type";
  upload_set_form_field photo[fast_local_image][filepath] "$upload_tmp_path";
  upload_set_form_field fast_upload_secret "this-is-a-key-from-nginx";
  upload_set_form_field _method "put";	

  # Allow the arguments that match this to go trhough
  # TODO: OAUTH 
  upload_pass_form_field "^format$|^oauth_.*|^commit$|^action$|^id$|^controller$|^authenticity_token$|^photo$";


  # Delete the new tmp file if the request fails upstream with any of this return values	
  upload_cleanup 400 404 499 500-505;
}

location @upload_location{
  #Add a rewrite here if you want the fast_upload request to post somewher else
  rewrite (.*) $1_fast; 
  proxy_pass http://zangzing_upstream;
}
