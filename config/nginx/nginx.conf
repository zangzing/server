# This is the top level nginx.conf file - it is generated by chef scripts so
# if you need to make changes you need to make then in the chef template and
# redeploy.  For creation of local dev files you can do so by running the following
# command from your ey-cloud-recipes directory
#
# sudo chef-solo -l debug -c config-local/solo.rb -j config-local/dna.json
#
# To run a debug session start as:
#
# sudo rdebug-ide -p 7000 -- `which chef-solo` -l debug -c config-local/solo.rb -j config-local/dna.json
#
# and set up your ide to run against that session.
#

daemon off;
worker_processes 4;
pid log/nginx.pid;

events {
  worker_connections 8192;
  #use epoll;
}


http {

    types {
        text/html                             html htm shtml;
        text/css                              css;
        text/xml                              xml rss;
        image/gif                             gif;
        image/jpeg                            jpeg jpg;
        application/x-javascript              js;
        application/atom+xml                  atom;

        text/mathml                           mml;
        text/plain                            txt;
        text/vnd.sun.j2me.app-descriptor      jad;
        text/vnd.wap.wml                      wml;
        text/x-component                      htc;

        image/png                             png;
        image/tiff                            tif tiff;
        image/vnd.wap.wbmp                    wbmp;
        image/x-icon                          ico;
        image/x-jng                           jng;
        image/x-ms-bmp                        bmp;
        image/svg+xml                         svg;

        application/java-archive              jar war ear;
        application/mac-binhex40              hqx;
        application/msword                    doc;
        application/pdf                       pdf;
        application/postscript                ps eps ai;
        application/rtf                       rtf;
        application/vnd.ms-excel              xls;
        application/vnd.ms-powerpoint         ppt;
        application/vnd.wap.wmlc              wmlc;
        application/vnd.wap.xhtml+xml         xhtml;
        application/x-cocoa                   cco;
        application/x-java-archive-diff       jardiff;
        application/x-java-jnlp-file          jnlp;
        application/x-makeself                run;
        application/x-perl                    pl pm;
        application/x-pilot                   prc pdb;
        application/x-rar-compressed          rar;
        application/x-redhat-package-manager  rpm;
        application/x-sea                     sea;
        application/x-shockwave-flash         swf;
        application/x-stuffit                 sit;
        application/x-tcl                     tcl tk;
        application/x-x509-ca-cert            der pem crt;
        application/x-xpinstall               xpi;
        application/zip                       zip;

        application/octet-stream              bin exe dll;
        application/octet-stream              deb;
        application/octet-stream              dmg;
        application/octet-stream              eot;
        application/octet-stream              iso img;
        application/octet-stream              msi msp msm;

        audio/midi                            mid midi kar;
        audio/mpeg                            mp3;
        audio/x-realaudio                     ra;

        video/3gpp                            3gpp 3gp;
        video/mpeg                            mpeg mpg;
        video/quicktime                       mov;
        video/x-flv                           flv;
        video/x-mng                           mng;
        video/x-ms-asf                        asx asf;
        video/x-ms-wmv                        wmv;
        video/x-msvideo                       avi;
    }

    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] '
                  '"$request" $status $body_bytes_sent "$http_referer" '
                  '"$http_user_agent" "$http_x_forwarded_for"';

    sendfile on;

    tcp_nopush        on;

    server_names_hash_bucket_size  128;

    gzip              on;
    gzip_http_version 1.0;
    gzip_comp_level   2;
    gzip_proxied      any;
    gzip_buffers      16 8k;
    gzip_types        text/plain text/html text/css application/x-javascript text/xml application/xml application/xml+rss text/javascript;
    # gzip_disable      "MSIE [1-6]\.(?!.*SV1)";

    #
    # set up the proxy directories and initial settings so that we can use it in the location handlers
    #
    # the size after key_zones=zz_cache:100m represents the amount of space needed in shared memory for the keys.  Keys are 128 bytes
    # each for a 64bit system so 80m would give us room for about 624k individual items.  max_size is the maximum size of the cache
    # on disk and inactive is the amount of time before non touched items are flushed - currently set to 90 days
    #
    # This file must be included from within the http level directive in nginx since it is only valid
    # to set up the cache paths at that level
    #
    proxy_cache_path  /tmp/nginx/cache levels=1 keys_zone=zz_cache:80m max_size=100G inactive=90d;
    proxy_temp_path /tmp/nginx/tmp_files;


    # custom upstream for this server
    upstream zangzing_upstream {
        server localhost:3001;
    }

    # lets us pretend to serve assets from another server
    # base port + 2
    server {
        listen 3002;
        server_name localhost;

        root public;

        access_log log/nginx-asset.access.log main;
        error_log  log/nginx-asset.error.log notice;

        # serve up anything in our doc root
        location / {
            expires 1y;
        }
    }

    server {
        listen 3000;
        server_name localhost;

        root public;

        access_log log/nginx-access.log main;
        error_log  log/nginx-error.log notice;
        # error_log /dev/null notice;

        #
        # provide a very long timeout
        # for development so we can sit
        # in the debugger without dropping connections
        #
        proxy_read_timeout 7200s;



#
# this section is generic between all servers and configurations
# except for the specifics about hosts and such which are
# generated via the chef scripts.
#
#

        client_max_body_size 50M;


        index index.html index.htm;

        # proxy set up
        # set reasonable proxy memory limits
        proxy_max_temp_file_size 64M;
        proxy_buffering on;
        proxy_buffer_size 8k;
        proxy_buffers 32 8k;
        # Note: in some version 7.xx of nginx they do not pass Set-Cookie unless explicitly told to do so
        proxy_pass_header       Set-Cookie;



#####
        # maintenance page support
        # This allows people to use images and css in their maintenance.html file
        if ($request_filename ~* \.(css|jpg|gif|png)$) {
            break;
        }

        # Rewrite all the requests to the maintenance.html page if it exists.
        if (-f $document_root/system/maintenance.html) {
            return 503;
        }

        error_page 401 /401.html;
        error_page 403 /403.html;
        error_page 404 /404.html;
        error_page 500 502 504 /500.html;

        error_page 503 @503;

        location @503 {
            rewrite  ^(.*)$  /system/maintenance.html break;
        }
#####


#####
        # remap the location for staging.site.zangzing.com - i.e. the wordpress site
        # wordpress doesn't like it if you give urls without a trailing /
        # and ends up issuing redirects so we need to make sure we
        # deal with that here.  As an alternate to avoid the redirects
        # see the commented out rules below
        #
        location ~* "^/(sitemap\.xml|blog|about|jobs|contact|team|site|wp-.*?)($|/.*?$)"{
            # uncomment following if you want to allow caching
            #proxy_cache zz_cache;
            #proxy_cache_valid  200 302  10m;

            proxy_intercept_errors off;
            proxy_set_header    Host                            staging.site.zangzing.com;
            proxy_pass          http://staging.site.zangzing.com;
            proxy_redirect      http://staging.site.zangzing.com/    http://localhost:3000/;
        }

        # handle the rewrite done to detect /?s=, /?p=, etc
        # this is done so we have something to trigger off of and get this proxied
        # over to staging.site.zangzing.com (wordpress) - we can't proxy from within an if
        # so we rewrite with /siteremap/ as the address which tells us to proxy
        # NOTE: although this looks similar to the above location there is a subtle
        # difference as we call the root level proxy / and don't pass any other path
        # elements.  The args are passed automagically by nginx
        location = /siteremap/{
            internal;
            proxy_intercept_errors off;
            proxy_set_header    Host                            staging.site.zangzing.com;
            proxy_pass          http://staging.site.zangzing.com/;
            proxy_redirect      http://staging.site.zangzing.com/    http://localhost:3000/;
        }
#####


#####
        # proxy to the potd site if starts with potd or 1-3 digits
        #
        location ~* "^/(potd|images/newhome|beta-email|\d{1,3}-.*)($|/.*?$)"{
            # uncomment following if you want to allow caching
            #proxy_cache zz_cache;
            #proxy_cache_valid  200 302  10m;

            proxy_set_header    Host                            localhost:4000;
            proxy_pass          http://localhost:4000;
            proxy_redirect      http://localhost:4000/    http://localhost:3000/;
        }

        # and proxy if the root
        location = / {

            # this is used to deal with /?s= and /?p= from the wordpress site
            # at the root level so it needs to go here
            if ($args ~ ^(s|p)=){
                rewrite ^/$ /siteremap/ last;
            }

            # if they are logged in (or appear to be) take them back to the service
            # when they visit the root page
            if ($http_cookie ~ "user_credentials=.*?($|;)"){
              rewrite ^(.*)$ http://localhost:3000/service/ redirect;
            }

            # uncomment following if you want to allow caching
            #proxy_cache zz_cache;
            #proxy_cache_valid  200 302  10m;

            proxy_set_header    Host                            localhost:4000;
            proxy_pass          http://localhost:4000;
            proxy_redirect      http://localhost:4000/    http://localhost:3000/;
        }
#####


#####
        # set Expire header on assets: see http://developer.yahoo.com/performance/rules.html#expires
        location ~ ^/(images|javascripts|stylesheets|assets|system)/ {
            expires 1y;
        }



        # needed to forward user's IP address to rails
        proxy_set_header  X-Real-IP         $remote_addr;
        proxy_set_header  X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header  Host              $http_host;
        proxy_set_header  X-Forwarded-Proto $scheme;
        proxy_redirect off;


        #
        #====================================== X-Accel-Redirect Proxy ====================================
        #
        # This proxy serves files through the X-Accel-Redirect header. You must include the host and path
        # of the file you want served in the header.  In the current configuration, the user  hits
        # www.zangzing.com/proxy?url=<SITE> the call is sent to rails which decides if the user is allowed
        # to use the proxy and if so returns the call with the X-Accel-Redirect header. Under this architecture
        # rails is only used for authentication and authorization but the heavy lifting of file proxying is
        # done by nginx
        #
        location ~* ^/nginx_redirect/(.*?)/(.*) {

            internal;                   # Only allow internal requests to use the proxy
            resolver 208.67.222.222;       # GWS - using public OpenDNS dns server
            resolver_timeout 10s;          # how long we are willing to wait for name to be resolved
            set $download_uri $2;       # Extract download host and uri from the request
            set $download_host $1;
            set $download_url http://$download_host/$download_uri;  # Compose download url

            proxy_set_header Host $download_host;  # Set download request headers

            # GWS Amazon doesn't like us passing our auth through to them since this came from our clients
            # i.e. it's our basic auth not amazons and the files are public currently.  Same thing goes
            # for cookies.
            #
            # The following removes the header to make Amazon happy:
            proxy_set_header Authorization "";
            # don't pass cookies meant for zangzing
            proxy_set_header Cookie "";

            proxy_pass $download_url;  # Download the file and send it to client
        }

        #
        # ==================================== Photo uploads with upload_module ===========================
        #
        # Using upload_module, for info: http://www.grid.net.ru/nginx/upload.en.html
        # For help with paperclip: http://matthewhutchinson.net/2010/1/6/nginx-upload-module-with-paperclip-on-rails
        #
        # accepts photo uploads from agent and sendgrid
        #
        location ~* ^/service/photos/(.+)/upload$|^/service/sendgrid/import$ {
            # Once upload is received, send request to this location (see below)
            upload_pass @upload_location;

            upload_max_file_size = 25M;

            # Store files to this directory
            # The directory is hashed, subdirectories 0 1 2 3 4 5 6 7 8 9 must exist
            # make sure to create //tmp/nginx/fast_uploads/0 /tmp/nginx/fast_uploads/1 etc.
            upload_store /tmp/nginx/fast_uploads 1;

            # set permissions on the uploaded files
            upload_store_access user:rw group:rw all:r;

            # Add new arguments to request body
            # this adds the original-filename, content-type, and the path+filename of the new tmp file
            upload_set_form_field fast_local_image[][original_name] "$upload_file_name";
            upload_set_form_field fast_local_image[][content_type] "$upload_content_type";
            upload_set_form_field fast_local_image[][filepath] "$upload_tmp_path";
            upload_set_form_field fast_upload_secret "this-is-a-key-from-nginx";
            upload_set_form_field _method "put";

            # Allow all the arguments  to go through 
			upload_pass_form_field "^.*$";

            # Delete the new tmp file if the request fails upstream with any of this return values
            upload_cleanup 400 404 499 500-505;
        }

        location @upload_location {
            #Add a rewrite here if you want the fast_upload request to post somewhere else
            rewrite (.*) $1_fast;
            proxy_pass http://zangzing_upstream;
        }


        # bypass cache for resque so we need an explicit
        # entry since our default is to allow caching of rails
        # responses that don't keep it from happening with
        # cache-control headers
        #
        location /service/admin/resque {
            proxy_pass http://zangzing_upstream;
        }

        # redirect to getsatisfaction page
        location ~* "^/(help)($|/.*?$)"{
            rewrite (.*) http://help.zangzing.com permanent;
        }
#####

#####
        # pass it on to rails
        location / {
            # Everything proxied in this location is subject to caching
            # so if you have any custom proxy handlers that shouldn't
            # be cached define them outside this location
            proxy_cache_valid  200 302  60m;
            proxy_cache zz_cache;


            # serve any existing file
            if (-f $request_filename) {
                break;
            }

            # serve any standard Rails page cache file with .html extension
            if (-f $request_filename.html) {
                rewrite (.*) $1.html break;
            }


            # auth is disabled for this server
            # auth_basic            "Restricted";
            # auth_basic_user_file  /etc/nginx/servers/zangzing.users;

            # nothing else served the file so on to the rails app
            if (!-f $request_filename) {
                proxy_pass http://zangzing_upstream;
                break;
            }
        }
#####

    }
}
