<% content_for :page_title do %>Finish Profile<% end %>

<%= render :partial => 'layouts/top_nav'  %>
<div id="article">
<div class="main">
<h1>Welcome to ZangZing. Let's create your profile.</h1>

<div class="fieldscontainer">
<form class="finish-profile-form">
<div class="section">
  <div class="flag-left">
    <div class="flag">1</div>
  </div>
  <div class="right">
      <div class="title">Add your profile photo</div>
      <div class="content">
        <div class="picture-container"><div class="mask"><img src="<%= @user.profile_photo_url %>" id="profile-photo"></div><img class="bottom-shadow" src="/images/photo/bottom-full.png"/></div>

        <div class="simple-uploader-button-wrapper">
            <a id="simple-uploader-button" class="black-button"><span>Upload</span></a>
            <div id="simple-uploader-flash-wrapper"></div>
        </div>
        <div class="progress-block none"></div>
      </div>
  </div>
</div>

  <div class="section">
    <div class="flag-left">
      <div class="flag">2</div>
    </div>
    <div class="right">
        <div class="title">Tell us your name</div>
        <div class="content">
          <label for="user_name" >First &amp; Last Name</label>
          <input type="text" name="user[name]" id="user_name" value="" />

        </div>
    </div>
  </div>

  <div class="section">
    <div class="flag-left">
      <div class="flag">3</div>
    </div>
    <div class="right">
        <div class="title">Pick your username</div>
        <div class="content">
          <label for="user_username">zangzing.com/</label>
          <input type="text" name="user[username]" id="user_username" value="" />
        </div>
    </div>
  </div>
  <input type="hidden" name="follow_user_id" id="follow_user_id" value="<%=(@follow_user_id ? @follow_user_id : '') %>"/>
  <div class="clear"></div>
</form>
</div><!--fieldscontainer-->

<div class="donecontainer">
  <input type="button" id="done" value="Done" />
</div>

</div><!--main-->
</div>

<% content_for :zz_js_document_ready do %>
    remove_toolbar_buttons();

    var validator = add_profile_validation( $('.finish-profile-form') );

    $('.content label').first().inFieldLabels();

    bind_done();

    load_profile_photo("<%= @user.profile_photo_url %>");

    setup_upload();
<%end%>


<% content_for :page_javascript do %>
<%= include_javascripts :shared %>

<script type="text/javascript">
var zz = zz || {};
zz.config = zz.config || {};
zz.config.rails_asset_id         = '<%= ENV["RAILS_ASSET_ID"] %>';
zz.config.rails_asset_host       = '<%= ActionController::Base.asset_host %>';
zz.config.facebook_app_id        = '<%=FACEBOOK_API_KEYS[:app_id]%>';
zz.config.rails_env              = '<%= ENV["RAILS_ENV"] %>';

function check_form(form_element){
    var num_fields_nonempty = 0;

    num_fields_nonempty =
        (form_element.find('#user_name').val().length != 0) +
        (form_element.find('#user_username').val().length != 0);

    if(form_element.valid()){
        submit_data(form_element);
        ZZAt.track("join.finishprofile.click");
        ZZAt.track("join.finishprofile.click.valid");
    } else {
        var num_fields_valid = 0;
        var bit_notation = 0;

        bit_notation =
            1 * form_element.find('#user_name').valid() +
            2 * (form_element.find('#user_name').val().length != 0) +
            4 * form_element.find('#user_username').valid() +
            8 * (form_element.find('#user_username').val().length != 0);

        num_fields_valid =
            form_element.find('#user_name').valid() +
            form_element.find('#user_username').valid();

        ZZAt.track("join.finishprofile.click");
        ZZAt.track("join.finishprofile.invalid", {
            Zjoin_num_fields_nonempty: num_fields_nonempty,
            Zjoin_num_fields_valid: num_fields_valid,
            Zjoin_bit_fields: bit_notation
        });
    }
} // check_form

function submit_data(form_element){
    var finish_api_url = "/zz_api/login_create_finish";
    var name, username, follow_user_id, hash;

    name = form_element.find('#user_name').val();
    username = form_element.find('#user_username').val();
    follow_user_id = form_element.find('#follow_user_id').val();
    hash = {name: name, username: username, follow_user_id: follow_user_id};

    $.ajax({
        url: finish_api_url,
        type: 'POST',
        data: hash,
        success: function(data){
            window.location = "/service/users/after_join";
        }, // success
        error:function(jqXHR, textStatus, errorThrown){
            var response = null;
            try {
                response = JSON.parse(jqXHR.responseText);
                alert(response.message);
            } catch (e) {
                alert("There was an error submitting your info. Please try again.");
                return false;
            }

        } // error
    });
} // submit_data


function remove_toolbar_buttons(){
    $("#user-info").remove(); // css overriden by js
}


function bind_done(){
    $('#done').click(function(){
        check_form($('.finish-profile-form'));
    });

    $('.finish-profile-form').bind('keypress', function(e){
        if ( e.keyCode == 13 ) {
            check_form($('.finish-profile-form'));
        }
    });
}

function unbind_done(){
    $('#done').unbind();
    $('.finish-profile-form').unbind();
}

// takes a jquery element
function add_profile_validation(element) {
    zz.joinform.add_regex_validator();

    return element.validate( {
        rules : {
            'user[name]' : {
                required : true,
                minlength : 1
            },
            'user[username]' : {
                required : true,
                minlength : 1,
                maxlength : 25,
                regex : "(^[a-zA-Z0-9]+$|^[a-zA-Z0-9]+:.{8}$)",
                remote : zz.routes.path_prefix + '/users/validate_username' // can add async true here to force validation on slow connection
            }
        },
        messages : {
            'user[name]' : {
                required : 'Please enter your name.',
                minlength : 'Please enter your name.'
            },
            'user[username]' : {
                required : 'Please enter a username.',
                regex : 'Only letters and numbers.',
                remote : 'This username is already taken.'
            }
        }
    });
}

function load_profile_photo(url){
    $("#profile-photo").attr('src', url);
    zz.image_utils.pre_load_image(url, function(image) {
        var css = zz.image_utils.scale_center_and_crop(image, {width: 48, height: 48});
        $("#profile-photo").css(css);
    });
}

$('#simple-uploader-button').click(function() {
    alert('The uploader requries the Flash.\nPlease download and install from http://get.adobe.com/flashplayer.');
});

function setup_upload(){
    var album_id = <%=(@user ? @user.profile_album_id: 'nil')%>;
    var user_credentials = $.cookie('user_credentials');

    $('#simple-uploader-flash-wrapper').html('<div id="replace-with-swfupload"></div>');

    var on_done = function(serverData) {
        change_processing_text("Processing photo...");

        var response = null;
        try {
            response = JSON.parse(serverData);
            //console.debug(JSON.stringify(response));
            poll_photo(album_id, response.id);
        } catch (e) {
            // Couldn't parse server response. Default to waiting 5 seconds
            setTimeout(function() {
                photo_ready(album_id, 0);
            }, 5000);
        }
    };

    var uploader = new SWFUpload({
        // Backend Settings
        upload_url: '/zz_api/albums/' + album_id + '/upload',
        post_params: {'user_credentials': user_credentials, 'priority': 90},

        // File Upload Settings
        file_size_limit: '102400',    // 100MB
        file_types: '*.jpg;*.jpeg;*.png;*.gif;*.tiff;*.JPG;*.JPEG;*.PNG;*.GIF;*.TIFF',
        file_types_description: 'Image Files',
        file_upload_limit: '0',
        file_queue_limit: '0',
        button_action: SWFUpload.BUTTON_ACTION.SELECT_FILE,


        // Button Settings
        button_width: 75,
        button_height: 30,
        button_window_mode: SWFUpload.WINDOW_MODE.TRANSPARENT,
        button_cursor: SWFUpload.CURSOR.HAND,
        button_placeholder_id: "replace-with-swfupload",

        // Flash Settings
        flash_url: '/static/swf/swfupload.swf',

        file_queued_handler: function(file) {
            unbind_done();
            show_processing_ui();
            uploader.startUpload();
        },

        upload_success_handler: function(file, serverData) {
            on_done(serverData);
            bind_done();
            ZZAt.track('join.finishprofile.profilephoto.uploaded');
        },

        upload_error_handler: function(file, errorCode, message) {
            uploader.cancelUpload(file.id, false);
            show_upload_error();
            ZZAt.track('join.finishprofile.profilephoto.error', {errorCode: errorCode, errorMessage: message});
        }

    }); // new SWFUpload
}

function show_processing_ui(){
    var progui = '<div class="processing-container"><img src="{{src}}"><span>Adding photo...</span></div>'.replace('{{src}}', zz.routes.image_url('/images/loading.gif'));

    // Show block
    $(".progress-block").removeClass("none");

    // Insert progress meter
    $(".progress-block").html(progui);
}

function hide_processing_ui(){
    $(".progress-block").addClass("none");
}

function change_processing_text(text){
    $(".processing-container span").html(text);
}

function show_upload_error(error_string){
    var message = "There was an error adding your photo. Please try again.";
    hide_processing_ui();
    $(".swfupload").remove();
    setup_upload();
    if(error_string){
        message += "\n"+error_string;
    }
    alert(message);
}

function poll_photo(album_id, photo_id){
    zz.finish_profile_photo_poll.call(
        '/zz_api/photos/state',
        'POST',
        {photo_ids: [photo_id]},

        //Continue
        function(data, status, jqXHR) {
            return data[photo_id].state != "ready";
        },

        //Success
        function(data, status, jqXHR) {
            photo_ready(album_id, photo_id);
        },
        //Failure
        function(data, status, jqXHR) {
            photo_ready(album_id, photo_id);
        }
    );
}



function photo_ready(album_id, photo_id){
    // Couldn't parse response from server
    if(photo_id==null || photo_id==0){
        // TODO:
    }
    //console.debug('photo ready called');

    $.ajax({ type: 'POST',
        url: '/zz_api/albums/' + album_id + '/update',
        data: { cover_photo_id: photo_id },
        success: function(data, status, jqXHR) {
        //    console.debug('set album success');
            photo_load_and_set();
        },
        error:function(jqXHR, textStatus, errorThrown){
            var response = null;
            try {
                response = JSON.parse(jqXHR.responseText);
                alert(response.message);
            } catch (e) {
                alert("There was an error adding your photo. Please try again.");
                return false;
            }
        } // error
    });


}

function photo_load_and_set(){

    $.ajax({ type: 'GET',
        url: '/zz_api/users/current_user_info',
        data: {},
        async: false,
        success: function(data, status, jqXHR) {
            //console.debug(data);
            var photo_url = data.profile_photo_url;
            //console.debug(photo_url);
            load_profile_photo(photo_url);
            hide_processing_ui();
            $(".swfupload").remove();
            setup_upload();
        },
        error:function(jqXHR, textStatus, errorThrown){
            var response = null;
            try {
                response = JSON.parse(jqXHR.responseText);
                alert(response.message);
            } catch (e) {
                alert("There was an error adding your photo. Please try again.");
                return false;
            }
        } // error
    });


}




zz.finish_profile_photo_poll = {
    MAX_CALLS: 35,
    DELAY: 1000,

    call: function(url, method, data, continue_callback, success_callback, failure_callback) {
        var self = this;
        var makeCall, success;
        var calls = 0;

        success = function(data, status, jqXHR) {
            if (continue_callback(data, status, jqXHR)) {
                webdriver.enter_async();  //allows webdriver to wait for ajax polling to complete
                setTimeout(function() {
                    webdriver.leave_async();
                    makeCall();
                }, self.DELAY);
            }
            else {
                success_callback(data, status, jqXHR);
                ZZAt.track('join.finishprofile.profilephoto.batchtime', {seconds: calls});
            }
        };

        makeCall = function() {
            calls++;

            if (calls > self.MAX_CALLS) {
                failure_callback('maxtries');
                ZZAt.track('join.finishprofile.profilephoto.batchtimeout');
            }
            else {
                $.ajax({
                    url: url,
                    type: method,
                    data: data,
                    success: success,
                    error: function(request, error, errorThrown) {
                        zz.logger.debug(error);
                        failure_callback(request, error, errorThrown);
                    }
                });
            }
        };

        makeCall();
    }
};

</script>

<% end %>
